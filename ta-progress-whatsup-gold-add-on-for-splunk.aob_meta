{"basic_builder": {"appname": "ta-progress-whatsup-gold-add-on-for-splunk", "friendly_name": "Progress WhatsUp Gold Add-on for Splunk", "version": "2.0.1", "author": "FDSE", "description": "Progress formerly ipswitch has a product WhatsUp Gold. This Add-on provides integration to get network data from WhatsUp Gold API.", "theme": "#ffde63", "large_icon": "", "small_icon": "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", "visible": true, "tab_version": "4.1.1", "tab_build_no": "0", "build_no": 6}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "progress:whatsupgold", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "progress_whatsup_gold", "title": "Progress WhatsUp Gold", "description": "Progress WhatsUp Gold", "type": "customized", "parameters": [{"required": false, "name": "device_reports", "label": "Device Reports", "default_value": ["cpu-utilization", "ping-availability", "state-change", "disk-utilization", "interface-utilization", "memory-utilization"], "help_string": "Pick the reports you'd like to fetch.", "placeholder": "", "possible_values": [{"value": "cpu-utilization", "label": "CPU Utilization"}, {"value": "disk-free-space", "label": "Disk Free Space"}, {"value": "disk-utilization", "label": "Disk Utilization"}, {"label": "Interface Discards", "value": "interface-discards"}, {"label": "Interface Errors", "value": "interface-errors"}, {"label": "Interface Traffic", "value": "interface-traffic"}, {"label": "Interface Utilization", "value": "interface-utilization"}, {"label": "Memory Utilization", "value": "memory-utilization"}, {"label": "Ping Availability", "value": "ping-availability"}, {"label": "Response Time", "value": "response-time"}, {"label": "State Change", "value": "state-change"}], "type": "multi_dropdownlist", "format_type": "multi_dropdownlist", "value": ["cpu-utilization", "ping-availability", "state-change", "disk-utilization", "interface-utilization", "memory-utilization"]}, {"name": "time_range", "label": "Time Range", "help_string": "Typically, keep \"TIme Range\" and Interval as same amount to avoid querying same data multiple times.", "required": true, "possible_values": [{"value": "today", "label": "today"}, {"value": "lastPolled", "label": "lastPolled"}, {"value": "yesterday", "label": "yesterday"}, {"label": "lastWeek", "value": "lastWeek"}, {"label": "lastMonth", "value": "lastMonth"}, {"label": "lastQuarter", "value": "lastQuarter"}, {"label": "weekToDate", "value": "weekToDate"}, {"label": "monthToDate", "value": "monthToDate"}, {"label": "quarterToDate", "value": "quarterToDate"}, {"label": "lastNSeconds", "value": "lastNSeconds"}, {"label": "lastNMinutes", "value": "lastNMinutes"}, {"label": "lastNHours", "value": "lastNHours"}, {"label": "lastNDays", "value": "lastNDays"}, {"label": "lastNWeeks", "value": "lastNWeeks"}, {"label": "lastNMonths", "value": "lastNMonths"}], "format_type": "dropdownlist", "default_value": "today", "placeholder": "today", "type": "dropdownlist", "value": "today"}, {"name": "range_n", "label": "Range N", "help_string": "Default is \"1\". Multiplier for the last\"N\" kind timerange.", "required": true, "possible_values": [{"value": "1", "label": "1"}, {"value": "2", "label": "2"}, {"value": "3", "label": "3"}, {"label": "4", "value": "4"}, {"label": "5", "value": "5"}, {"label": "6", "value": "6"}, {"label": "7", "value": "7"}, {"label": "8", "value": "8"}, {"label": "9", "value": "9"}, {"label": "10", "value": "10"}, {"label": "11", "value": "11"}, {"label": "12", "value": "12"}, {"label": "13", "value": "13"}, {"label": "14", "value": "14"}], "format_type": "dropdownlist", "default_value": "1", "placeholder": "1", "type": "dropdownlist", "value": "1"}, {"name": "debug", "label": "Debug", "help_string": "Turn it on to produce more events/logs to identify any issues or reset the checkpoint.", "required": false, "format_type": "checkbox", "default_value": false, "type": "checkbox", "value": true}], "data_inputs_options": [{"type": "customized_var", "name": "device_reports", "title": "Device Reports", "description": "Pick the reports you'd like to fetch.", "required_on_edit": false, "required_on_create": false, "possible_values": [{"value": "cpu-utilization", "label": "CPU Utilization"}, {"value": "disk-free-space", "label": "Disk Free Space"}, {"value": "disk-utilization", "label": "Disk Utilization"}, {"label": "Interface Discards", "value": "interface-discards"}, {"label": "Interface Errors", "value": "interface-errors"}, {"label": "Interface Traffic", "value": "interface-traffic"}, {"label": "Interface Utilization", "value": "interface-utilization"}, {"label": "Memory Utilization", "value": "memory-utilization"}, {"label": "Ping Availability", "value": "ping-availability"}, {"label": "Response Time", "value": "response-time"}, {"label": "State Change", "value": "state-change"}], "format_type": "multi_dropdownlist", "default_value": ["cpu-utilization", "ping-availability", "state-change", "disk-utilization", "interface-utilization", "memory-utilization"], "placeholder": ""}, {"type": "customized_var", "name": "time_range", "title": "Time Range", "description": "Typically, keep \"TIme Range\" and Interval as same amount to avoid querying same data multiple times.", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "today", "label": "today"}, {"value": "lastPolled", "label": "lastPolled"}, {"value": "yesterday", "label": "yesterday"}, {"label": "lastWeek", "value": "lastWeek"}, {"label": "lastMonth", "value": "lastMonth"}, {"label": "lastQuarter", "value": "lastQuarter"}, {"label": "weekToDate", "value": "weekToDate"}, {"label": "monthToDate", "value": "monthToDate"}, {"label": "quarterToDate", "value": "quarterToDate"}, {"label": "lastNSeconds", "value": "lastNSeconds"}, {"label": "lastNMinutes", "value": "lastNMinutes"}, {"label": "lastNHours", "value": "lastNHours"}, {"label": "lastNDays", "value": "lastNDays"}, {"label": "lastNWeeks", "value": "lastNWeeks"}, {"label": "lastNMonths", "value": "lastNMonths"}], "format_type": "dropdownlist", "default_value": "today", "placeholder": "today"}, {"type": "customized_var", "name": "range_n", "title": "Range N", "description": "Default is \"1\". Multiplier for the last\"N\" kind timerange.", "required_on_edit": false, "required_on_create": true, "possible_values": [{"value": "1", "label": "1"}, {"value": "2", "label": "2"}, {"value": "3", "label": "3"}, {"label": "4", "value": "4"}, {"label": "5", "value": "5"}, {"label": "6", "value": "6"}, {"label": "7", "value": "7"}, {"label": "8", "value": "8"}, {"label": "9", "value": "9"}, {"label": "10", "value": "10"}, {"label": "11", "value": "11"}, {"label": "12", "value": "12"}, {"label": "13", "value": "13"}, {"label": "14", "value": "14"}], "format_type": "dropdownlist", "default_value": "1", "placeholder": "1"}, {"type": "customized_var", "name": "debug", "title": "Debug", "description": "Turn it on to produce more events/logs to identify any issues or reset the checkpoint.", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}], "code": "# encoding = utf-8\n\n\n\"\"\"Implement your data collection logic here\n\n# The following examples get the arguments of this input.\n# Note, for single instance mod input, args will be returned as a dict.\n# For multi instance mod input, args will be returned as a single value.\nopt_endpoint = helper.get_arg('endpoint')\n# In single instance mode, to get arguments of a particular input, use\nopt_endpoint = helper.get_arg('endpoint', stanza_name)\n\n# get input type\nhelper.get_input_type()\n\n# The following examples get input stanzas.\n# get all detailed input stanzas\nhelper.get_input_stanza()\n# get specific input stanza with stanza name\nhelper.get_input_stanza(stanza_name)\n# get all stanza names\nhelper.get_input_stanza_names()\n\n\n# The following examples get options from setup page configuration.\n# get the loglevel from the setup page\nloglevel = helper.get_log_level()\n# get proxy setting configuration\nproxy_settings = helper.get_proxy()\n# get account credentials as dictionary\naccount = helper.get_user_credential_by_username(\"username\")\naccount = helper.get_user_credential_by_id(\"account id\")\n# get global variable configuration\nglobal_whatsup_gold_endpoint_url = helper.get_global_setting(\"whatsup_gold_endpoint_url\")\nglobal_whatsup_gold_username = helper.get_global_setting(\"whatsup_gold_username\")\nglobal_whatsup_gold_password = helper.get_global_setting(\"whatsup_gold_password\")\n\n# The following examples show usage of logging related helper functions.\n\"\"\"\nimport os\nimport sys\nimport time\nimport datetime\nimport requests\nimport json\nfrom requests.auth import HTTPBasicAuth\nimport urllib3\nurllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)\nurllib3.disable_warnings()\n\n\nSOURCETYPE_WG_ERR = \"progress:whatsupgold:internal:error\"\nSOURCETYPE_WG_DEBUG = \"progress:whatsupgold:internal:debug\"\nSOURCETYPE_WG_VERSION = \"progress:whatsupgold:internal:version\"\nSOURCETYPE_WG_GROUPS = \"progress:whatsupgold:general:groups\"\nSOURCETYPE_WG_DEVICES = \"progress:whatsupgold:general:devices\"\nTOKEN_ENDPOINT = \"/api/v1/token\"\nTIME_RANGE = \"today\"\nMIN_LENGTH = 1\nACCESS_TOKEN = \"\"\nIS_DEBUG_ENABLED = False\nOPT_BASEURL = \" \"\nRANGE_N = \"1\"\n\ndef validate_input(helper, definition):\n    \"\"\"Implement your own validation logic to validate the input stanza configurations\"\"\"\n    # This example accesses the modular input variable\n    # endpoint = definition.parameters.get('endpoint', None)\n    pass\n\ndef collect_events(helper, ew):\n    \n    def log(message, sourcetype=None, exception=False, debug=False):\n        \n        if type(message) is dict:\n            message =  json.dumps(message)\n            \n        if type(message) is list:\n            message =  str(message)\n\n        if sourcetype is None:\n            sourcetype=helper.get_sourcetype()\n    \n        if debug == True:\n            sourcetype = SOURCETYPE_WG_DEBUG\n            if bool(IS_DEBUG_ENABLED) is False:\n                return\n\n        if exception == True:\n            sourcetype = SOURCETYPE_WG_ERR\n\n        event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=sourcetype, data=message)\n        ew.write_event(event)\n\n    def api_call(endpoint, method=\"GET\"):\n        try:\n            url = f'{OPT_BASEURL}/{endpoint}'\n            payload={}\n            headers = {\n              'Accept': 'application/json',\n              'Authorization': f'Bearer {ACCESS_TOKEN}',\n            }\n            \n            r = requests.request(\"GET\", url, headers=headers, data=payload)\n            \n            if r.status_code not in (200,302):\n                log(r.status_code, SOURCETYPE_WG_VERSION)\n                log(r.text, SOURCETYPE_WG_VERSION)\n                return \" Error \"\n        \n            \n            return json.loads(r.text)\n        except Exception as e:\n            log(str(e), exception=True)\n            return \" Exception \"\n\n    # 10.202.12.8\n    wug_api_endpoint = helper.get_global_setting(\"whatsup_gold_api_endpoint\")\n    wug_web_endpoint = helper.get_global_setting(\"whatsup_gold_web_endpoint\")\n    wug_username = helper.get_global_setting(\"whatsup_gold_username\")\n    wug_password = helper.get_global_setting(\"whatsup_gold_password\")\n    # OPT_ENDPOINT = helper.get_arg('endpoint')\n    OPT_BASEURL = wug_api_endpoint\n    IS_DEBUG_ENABLED = str(helper.get_arg('debug'))\n    TIME_RANGE = helper.get_arg('time_range')\n    RANGE_N = helper.get_arg('range_n')\n    device_reports = helper.get_arg('device_reports')\n\n\n    log(\"Init - 1.0.5\", debug=True)\n\n\n    def generate_token():\n        try:\n            url = f\"{wug_api_endpoint}/{TOKEN_ENDPOINT}\"\n            \n            payload = f\"grant_type=password&username={wug_username}&password={wug_password}\"\n            # log(payload, debug=True)\n            headers = {\n              'Accept': '*/*',\n              'Accept-Language': 'en-US,en;q=0.9',\n              'Connection': 'keep-alive',\n              'X-Requested-With': 'XMLHttpRequest'\n            }\n            \n            response = requests.request(\"POST\", url, headers=headers, data=payload)\n\n            if response.status_code not in (200,302):\n                log(response.text, SOURCETYPE_WG_VERSION)\n \n            return json.loads(response.text)['access_token']\n        except Exception as e:\n                log(str(e), exception=True)\n    \n        return response.text\n        \n    # Get WUG version\n    def get_version():\n\n        try:\n            url = f\"{wug_api_endpoint}/api/v1/product/version\"\n            payload={}\n            headers = {\n              'Accept': 'application/json',\n              'Authorization': f'Bearer {ACCESS_TOKEN}',\n            }\n            \n            # log(str(headers))\n            \n            response = requests.request(\"GET\", url, headers=headers, data=payload)\n            \n            if response.status_code not in (200,302):\n                log(response.text, SOURCETYPE_WG_VERSION)\n        \n            \n            return json.loads(response.text)[\"data\"]\n        except Exception as e:\n            log(str(e), exception=True)\n            return \" Exception \"\n            \n        return response.text\n        \n        \n        \n    # Get Groups\n    def get_groups():\n        endpoint = \"/api/v1/device-groups/-?limit=10000\"\n        groups = api_call(endpoint)\n        \n        for group in groups[\"data\"][\"groups\"]:\n            log(group, SOURCETYPE_WG_GROUPS)\n            get_devices(group[\"id\"])\n            break\n        \n        \n    # Get Devices for given group\n    def get_devices(group_id):\n        endpoint = f\"/api/v1/device-groups/{group_id}/devices/-?view=card&limit=10000\"\n        devices = api_call(endpoint)\n        devices_data = devices[\"data\"][\"devices\"]\n        \n        if len(devices_data) >= MIN_LENGTH:\n            for device in devices[\"data\"][\"devices\"]:\n                log(device, SOURCETYPE_WG_DEVICES)\n                get_additional_data(\"1\") # device[\"id\"]\n                break\n    \n    # Get Devices for given group\n    def get_additional_data(device_id):\n        endpoints = {\n          \"cpu-utilization\": f\"/api/v1/devices/{device_id}/reports/cpu-utilization?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"disk-free-space\": f\"/api/v1/devices/{device_id}/reports/disk-free-space?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"disk-utilization\": f\"/api/v1/devices/{device_id}/reports/disk-utilization?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"interface-discards\": f\"/api/v1/devices/{device_id}/reports/interface-discards?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"interface-errors\": f\"/api/v1/devices/{device_id}/reports/interface-errors?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"interface-traffic\": f\"/api/v1/devices/{device_id}/reports/interface-traffic?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"interface-utilization\": f\"/api/v1/devices/{device_id}/reports/interface-utilization?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"memory-utilization\": f\"/api/v1/devices/{device_id}/reports/memory-utilization?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"ping-availability\": f\"/api/v1/devices/{device_id}/reports/ping-availability?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"response-time\": f\"/api/v1/devices/{device_id}/reports/ping-response-time?range={TIME_RANGE}&rangeN={RANGE_N}\",\n          \"state-change\": f\"/api/v1/devices/{device_id}/reports/state-change?range={TIME_RANGE}&rangeN={RANGE_N}\"\n            }\n\n\n        for sourcetype in endpoints:\n            if sourcetype in device_reports:\n                endpoint = endpoints[sourcetype]\n                # log(endpoints, debug=True)\n                metadata = api_call(endpoint)[\"data\"]\n                if len(metadata) >= MIN_LENGTH:\n                    for event in metadata:\n                        log(event, sourcetype=f\"progress:whatsupgold:{sourcetype}\")\n\n    # Generate Token\n    ACCESS_TOKEN = generate_token()\n    #log(ACCESS_TOKEN + \"asd\")\n    # Get Version\n    log(get_version(), debug=True)\n    get_groups()\n    \n    \n    # auth = HTTPBasicAuth(global_whatsup_gold_username, global_whatsup_gold_password)\n    # for endpoint in opt_endpoint.split(\",\"):\n    #     url = f'{global_whatsup_gold_endpoint_url}/{opt_endpoint.strip()}'\n    #     url = url.replace('///','/')\n    #     api_call(\"GET\", url, auth)\n    \n    \n    \"\"\"\n    # write to the log for this modular input using configured global log level or INFO as default\n    helper.log(\"log message\")\n    # write to the log using specified log level\n    helper.log_debug(\"log message\")\n    helper.log_info(\"log message\")\n    helper.log_warning(\"log message\")\n    helper.log_error(\"log message\")\n    helper.log_critical(\"log message\")\n    # set the log level for this modular input\n    # (log_level can be \"debug\", \"info\", \"warning\", \"error\" or \"critical\", case insensitive)\n    helper.set_log_level(log_level)\n\n    # The following examples send rest requests to some endpoint.\n    response = helper.send_http_request(url, method, parameters=None, payload=None,\n                                        headers=None, cookies=None, verify=True, cert=None,\n                                        timeout=None, use_proxy=True)\n    # get the response headers\n    r_headers = response.headers\n    # get the response body as text\n    r_text = response.text\n    # get response body as json. If the body text is not a json string, raise a ValueError\n    r_json = response.json()\n    # get response cookies\n    r_cookies = response.cookies\n    # get redirect history\n    historical_responses = response.history\n    # get response status code\n    r_status = response.status_code\n    # check the response status, if the status is not sucessful, raise requests.HTTPError\n    response.raise_for_status()\n\n    # The following examples show usage of check pointing related helper functions.\n    # save checkpoint\n    helper.save_check_point(key, state)\n    # delete checkpoint\n    helper.delete_check_point(key)\n    # get checkpoint\n    state = helper.get_check_point(key)\n\n    # To create a splunk event\n    helper.new_event(data, time=None, host=None, index=None, source=None, sourcetype=None, done=True, unbroken=True)\n    \"\"\"\n\n    '''\n    # The following example writes a random number as an event. (Multi Instance Mode)\n    # Use this code template by default.\n    import random\n    data = str(random.randint(0,100))\n    event = helper.new_event(source=helper.get_input_type(), index=helper.get_output_index(), sourcetype=helper.get_sourcetype(), data=data)\n    ew.write_event(event)\n    '''\n\n    '''\n    # The following example writes a random number as an event for each input config. (Single Instance Mode)\n    # For advanced users, if you want to create single instance mod input, please use this code template.\n    # Also, you need to uncomment use_single_instance_mode() above.\n    import random\n    input_type = helper.get_input_type()\n    for stanza_name in helper.get_input_stanza_names():\n        data = str(random.randint(0,100))\n        event = helper.new_event(source=input_type, index=helper.get_output_index(stanza_name), sourcetype=helper.get_sourcetype(stanza_name), data=data)\n        ew.write_event(event)\n    '''\n", "customized_options": [{"name": "device_reports", "value": ["cpu-utilization", "ping-availability", "state-change", "disk-utilization", "interface-utilization", "memory-utilization"]}, {"name": "time_range", "value": "today"}, {"name": "range_n", "value": "1"}, {"name": "debug", "value": true}], "uuid": "4c8f61ddc0854ad39759a523bdfdcc98", "sample_count": 0}]}, "global_settings_builder": {"global_settings": {"log_settings": {"log_level": "DEBUG"}, "customized_settings": [{"required": true, "name": "whatsup_gold_api_endpoint", "label": "WhatsUp Gold API Endpoint", "default_value": "", "placeholder": "example: http://10.202.4.251:9644/", "help_string": "Endpoint of WhatsUp Gold API", "type": "text", "format_type": "text", "value": "http://10.202.4.251:9644/"}, {"required": true, "name": "whatsup_gold_web_endpoint", "label": "WhatsUp Gold Web Endpoint", "default_value": "", "placeholder": "example: http://10.202.4.251/", "help_string": "Web Endpoint servers UI.", "type": "text", "format_type": "text", "value": "http://10.202.4.251:80/"}, {"required": true, "name": "whatsup_gold_username", "label": "WhatsUp Gold Username", "default_value": "", "placeholder": "", "help_string": "Note: admin/service account", "type": "text", "format_type": "text", "value": "admin"}, {"required": true, "name": "whatsup_gold_password", "label": "WhatsUp Gold Password", "placeholder": "", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": ""}]}}, "sourcetype_builder": {"progress:whatsupgold": {"metadata": {"event_count": 0, "data_input_name": "progress_whatsup_gold", "extractions_count": 0, "cims_count": 0}}}}